import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler, \
    CallbackQueryHandler
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    CAR_INFO,
    ADDRESS_SELECT,
    ALARM_TYPE,
    TINTING_TYPE,
    CAMERA_NEED,
    MILEAGE,
    LAST_SERVICE,
    RECORD_CONFIRMATION
) = range(9)


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserData:
    def __init__(self):
        self.car_model = None
        self.service_type = None
        self.address = None
        self.alarm_type = None
        self.tinting_type = None
        self.camera_need = None
        self.mileage = None
        self.last_service = None


user_sessions = {}


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = [
        ['üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞'],
        ['üö® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏'],
        ['ü™ü –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ'],
        ['üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–¥—Ä–æ–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–ª—ã'],
        ['üîß –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∏ –†–µ–º–æ–Ω—Ç']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥"
def back_keyboard():
    keyboard = [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
def address_keyboard():
    keyboard = [
        ['üìç —É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê', 'üìç –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id] = UserData()

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_main_menu(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    user_id = update.message.from_user.id

    if text == 'üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞':
        await show_addresses(update)
        return MAIN_MENU

    elif text == 'üö® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏':
        user_sessions[user_id].service_type = 'signalization'
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=back_keyboard()
        )
        return CAR_INFO

    elif text == 'ü™ü –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ':
        user_sessions[user_id].service_type = 'tinting'
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=back_keyboard()
        )
        return CAR_INFO

    elif text == 'üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–¥—Ä–æ–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–ª—ã':
        user_sessions[user_id].service_type = 'android_radio'
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=back_keyboard()
        )
        return CAR_INFO

    elif text == 'üîß –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∏ –†–µ–º–æ–Ω—Ç':
        user_sessions[user_id].service_type = 'service'
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
            reply_markup=back_keyboard()
        )
        return CAR_INFO

    return MAIN_MENU


# –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞
async def show_addresses(update: Update):
    addresses_text = (
        "–†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å 9 –¥–æ 19\n\n"
        "üìç<a href='https://maps.google.com/?q=—É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê'>—É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê</a>\n"
        "<a href='tel:+79272679070'>+7 (927) 267-90-70</a>\n\n"
        "üìç<a href='https://maps.google.com/?q=–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê'>–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê</a>\n"
        "<a href='tel:+79371809633'>+7 (937) 180-96-33</a>"
    )

    keyboard = [
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É", callback_data="record_installation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        addresses_text,
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É"
async def handle_record_button(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_sessions[user_id] = UserData()
    user_sessions[user_id].service_type = 'installation'

    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ –≥–æ–¥ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
        reply_markup=back_keyboard()
    )
    return CAR_INFO


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
async def get_car_info(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].car_model = update.message.text

    service_type = user_sessions[user_id].service_type

    if service_type == 'signalization':
        keyboard = [
            ['üöó –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º', 'üöô –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ALARM_TYPE

    elif service_type == 'tinting':
        keyboard = [
            ['üî≤ –ó–∞–¥–Ω–∏–π –æ—Ç—Å–µ–∫', 'üî≥ –ü–µ—Ä–µ–¥–Ω–∏–µ –±–æ–∫–æ–≤—ã–µ', 'üåê –õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return TINTING_TYPE

    elif service_type == 'android_radio':
        keyboard = [
            ['‚úÖ –î–∞', '‚ùå –ù–µ—Ç'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã –∑–∞–¥–Ω–µ–≥–æ –≤–∏–¥–∞?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CAMERA_NEED

    elif service_type == 'service':
        keyboard = [
            ['–î–æ 15 000 –∫–º', '15 000 - 30 000 –∫–º', '30 000 - 60 000 –∫–º'],
            ['60 000 - 100 000 –∫–º', '–°–≤—ã—à–µ 100 000 –∫–º'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
        ]
        await update.message.reply_text(
            "–ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return MILEAGE

    elif service_type == 'installation':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
            reply_markup=address_keyboard()
        )
        return ADDRESS_SELECT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
async def handle_alarm_type(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].alarm_type = update.message.text

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=address_keyboard()
    )
    return ADDRESS_SELECT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–Ω–∏—Ä–æ–≤–∫–∏
async def handle_tinting_type(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].tinting_type = update.message.text

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=address_keyboard()
    )
    return ADDRESS_SELECT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã
async def handle_camera_need(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].camera_need = update.message.text

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=address_keyboard()
    )
    return ADDRESS_SELECT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–µ–≥–∞
async def handle_mileage(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].mileage = update.message.text

    keyboard = [
        ['–ú–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥', '6-12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥'],
        ['–ë–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥', '–ù–µ –ø–æ–º–Ω—é'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    await update.message.reply_text(
        "–ö–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return LAST_SERVICE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¢–û
async def handle_last_service(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].last_service = update.message.text

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        reply_markup=address_keyboard()
    )
    return ADDRESS_SELECT


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
async def handle_address_select(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_sessions[user_id].address = update.message.text

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
    user_data = user_sessions[user_id]
    message = f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
    message += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {user_data.car_model}\n"
    message += f"üìç –ê–¥—Ä–µ—Å: {user_data.address}\n"

    if user_data.service_type == 'signalization':
        message += f"üö® –£—Å–ª—É–≥–∞: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n"
        message += f"üìã –¢–∏–ø: {user_data.alarm_type}\n"
    elif user_data.service_type == 'tinting':
        message += f"ü™ü –£—Å–ª—É–≥–∞: –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ\n"
        message += f"üìã –¢–∏–ø: {user_data.tinting_type}\n"
    elif user_data.service_type == 'android_radio':
        message += f"üì± –£—Å–ª—É–≥–∞: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–¥—Ä–æ–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–ª—ã\n"
        message += f"üì∑ –ö–∞–º–µ—Ä–∞ –∑–∞–¥–Ω–µ–≥–æ –≤–∏–¥–∞: {user_data.camera_need}\n"
    elif user_data.service_type == 'service':
        message += f"üîß –£—Å–ª—É–≥–∞: –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∏ –†–µ–º–æ–Ω—Ç\n"
        message += f"üìè –ü—Ä–æ–±–µ–≥: {user_data.mileage}\n"
        message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û: {user_data.last_service}\n"
    elif user_data.service_type == 'installation':
        message += f"üîß –£—Å–ª—É–≥–∞: –ó–∞–ø–∏—Å—å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É\n"

    message += f"\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"

    await update.message.reply_text(
        message,
        reply_markup=main_menu_keyboard()
    )

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del user_sessions[user_id]

    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def handle_back(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]

    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU


def main() -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()

    # –°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Text(['üìç –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞', 'üö® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏', 'ü™ü –¢–æ–Ω–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ',
                                             'üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–¥—Ä–æ–∏–¥ –º–∞–≥–Ω–∏—Ç–æ–ª—ã', 'üîß –ü–ª–∞–Ω–æ–≤–æ–µ –¢–û –∏ –†–µ–º–æ–Ω—Ç']),
                               handle_main_menu),
                CallbackQueryHandler(handle_record_button, pattern="^record_installation$")
            ],
            CAR_INFO: [
                MessageHandler(filters.TEXT & ~filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), get_car_info),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
            ALARM_TYPE: [
                MessageHandler(filters.Text(['üöó –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º', 'üöô –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º']),
                               handle_alarm_type),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
            TINTING_TYPE: [
                MessageHandler(filters.Text(['üî≤ –ó–∞–¥–Ω–∏–π –æ—Ç—Å–µ–∫', 'üî≥ –ü–µ—Ä–µ–¥–Ω–∏–µ –±–æ–∫–æ–≤—ã–µ', 'üåê –õ–æ–±–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ']),
                               handle_tinting_type),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
            CAMERA_NEED: [
                MessageHandler(filters.Text(['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']), handle_camera_need),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
            MILEAGE: [
                MessageHandler(filters.Text(['–î–æ 15 000 –∫–º', '15 000 - 30 000 –∫–º', '30 000 - 60 000 –∫–º',
                                             '60 000 - 100 000 –∫–º', '–°–≤—ã—à–µ 100 000 –∫–º']), handle_mileage),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
            LAST_SERVICE: [
                MessageHandler(filters.Text(['–ú–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥', '6-12 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥',
                                             '–ë–æ–ª–µ–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥', '–ù–µ –ø–æ–º–Ω—é']), handle_last_service),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
            ADDRESS_SELECT: [
                MessageHandler(filters.Text(['üìç —É–ª. –§–∞–¥–µ–µ–≤–∞, 51–ê', 'üìç –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à., 16 –∫–º, 1–ê']),
                               handle_address_select),
                MessageHandler(filters.Text(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']), handle_back)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()